{"ast":null,"code":"const clausesLength = 3;\n\n/*\r\n* Builds the instance(s) into a friendly way\r\n*/\nexport function buildInstance(arr) {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let info = {\n      id: hexToDecimal(arr[i][0]),\n      chain: buildChain(arr[i][1]),\n      size: hexToDecimal(arr[i][2]),\n      created: buildDate(arr[i][3]),\n      solution: arr[i][4],\n      solved: arr[i][5],\n      ended: buildDate(arr[i][6])\n    };\n    result.push(info);\n  }\n  return result;\n}\n\n/*\r\n* Builds the chain as a string\r\n*/\nfunction buildChain(_oldChain) {\n  let result = \"\";\n  let array = Array.from(_oldChain);\n  while (array.length > 1) {\n    result += \"(\";\n    for (let i = 0; i < clausesLength; i++) {\n      if (Math.random() < 0.5) result += \"x\" + array.shift();else result += \"¬\" + \"x\" + array.shift();\n      if (i < clausesLength - 1) result += \" v \";\n    }\n    result += \")\";\n    if (array.length > 1) result += \" ^ \";\n  }\n  return result;\n}\n\n/*\r\n* Converts a hexadecimal number to decimal number\r\n*/\nfunction hexToDecimal(_hexNumber) {\n  return parseInt(_hexNumber._hex, 16);\n}\n\n/*\r\n* Builds the date as date format\r\n*/\nfunction buildDate(_oldDate) {\n  let result, newDate;\n  if (hexToDecimal(_oldDate) !== 0) {\n    newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n    result = newDate.getFullYear() + \"/\" + (newDate.getMonth() + 1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n  } else result = \"Date unavailable\";\n  return result;\n}\n\n/*\r\n* Returns 'true' or 'false' with 50% probability\r\n*/\nfunction getBoolean() {\n  if (Math.random() >= 50) return true;else return false;\n}\n\n/*\r\n* Builds an array of date as date format\r\n*/\nexport function buildDateArray(_arrayRandoms) {\n  let result = [];\n  for (let i = 0; i < _arrayRandoms.length; i++) result.push(buildDate(_arrayRandoms[i]));\n  return result;\n}","map":{"version":3,"names":["clausesLength","buildInstance","arr","result","i","length","info","id","hexToDecimal","chain","buildChain","size","created","buildDate","solution","solved","ended","push","_oldChain","array","Array","from","Math","random","shift","_hexNumber","parseInt","_hex","_oldDate","newDate","Date","slice","getFullYear","getMonth","getDate","getHours","getMinutes","getBoolean","buildDateArray","_arrayRandoms"],"sources":["C:/Users/Jona_/Documents/GitHub/3sat_instance_generator/src/components/UserSection/supportFunctions.js"],"sourcesContent":["const clausesLength = 3;\r\n\r\n/*\r\n* Builds the instance(s) into a friendly way\r\n*/\r\nexport function buildInstance(arr) {\r\n    let result = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let info = {\r\n            id: hexToDecimal(arr[i][0]),\r\n            chain: buildChain(arr[i][1]),\r\n            size: hexToDecimal(arr[i][2]),\r\n            created: buildDate(arr[i][3]),\r\n            solution: arr[i][4],\r\n            solved: arr[i][5],\r\n            ended: buildDate(arr[i][6])\r\n        };\r\n        result.push(info);\r\n    }\r\n    return result;\r\n}\r\n\r\n/*\r\n* Builds the chain as a string\r\n*/\r\nfunction buildChain(_oldChain) {\r\n    let result = \"\";\r\n    let array = Array.from(_oldChain);\r\n    while (array.length > 1) {\r\n        result += \"(\";\r\n        for (let i = 0; i < clausesLength; i++) {\r\n            if (Math.random() < 0.5)\r\n                result += \"x\" + array.shift();\r\n            else\r\n                result += \"¬\" + \"x\" + array.shift();\r\n            if (i < clausesLength - 1)\r\n                result += \" v \";\r\n        }\r\n        result += \")\";\r\n        if (array.length > 1)\r\n            result += \" ^ \";\r\n    }\r\n    return result;\r\n}\r\n\r\n/*\r\n* Converts a hexadecimal number to decimal number\r\n*/\r\nfunction hexToDecimal(_hexNumber) {\r\n    return parseInt(_hexNumber._hex, 16);\r\n}\r\n\r\n/*\r\n* Builds the date as date format\r\n*/\r\nfunction buildDate(_oldDate) {\r\n    let result, newDate;\r\n    if (hexToDecimal(_oldDate) !== 0) {\r\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\r\n        result = newDate.getFullYear() + \"/\" + (newDate.getMonth()+1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\r\n    } else\r\n        result = \"Date unavailable\";\r\n    return result;\r\n}\r\n\r\n/*\r\n* Returns 'true' or 'false' with 50% probability\r\n*/\r\nfunction getBoolean() {\r\n    if (Math.random() >= 50)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n\r\n/*\r\n* Builds an array of date as date format\r\n*/\r\nexport function buildDateArray(_arrayRandoms) {\r\n    let result = [];\r\n    for (let i = 0; i < _arrayRandoms.length; i++)\r\n        result.push(buildDate(_arrayRandoms[i]));\r\n    return result;\r\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}