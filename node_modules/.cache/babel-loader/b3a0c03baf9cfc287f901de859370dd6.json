{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n  _excluded2 = [\"colorSchemes\"],\n  _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetThemeVar from './createGetThemeVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange = false,\n    enableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar\n  } = options;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = {},\n      prefix = designSystemPrefix,\n      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n      attribute = DEFAULT_ATTRIBUTE,\n      defaultMode = desisgnSystemMode,\n      defaultColorScheme = designSystemColorScheme\n    } = _ref;\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    const clonedBaseTheme = React.useMemo(() => JSON.parse(JSON.stringify(baseTheme)), []);\n    const {\n        colorSchemes: baseColorSchemes = {}\n      } = clonedBaseTheme,\n      restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n    const {\n        colorSchemes: colorSchemesProp = {}\n      } = themeProp,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n      {\n        components = {}\n      } = _deepmerge,\n      mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components,\n      colorSchemes,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getThemeVar: createGetThemeVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\n    attribute: PropTypes.string,\n    /**\r\n     * The component tree.\r\n     */\n    children: PropTypes.node,\n    /**\r\n     * The initial color scheme used.\r\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\r\n     * The initial mode used.\r\n     */\n    defaultMode: PropTypes.string,\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\n    modeStorageKey: PropTypes.string,\n    /**\r\n     * CSS variable prefix.\r\n     */\n    prefix: PropTypes.string,\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","_excluded3","React","PropTypes","GlobalStyles","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","createSpacing","createBreakpoints","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","createGetThemeVar","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","_baseTheme$breakpoint","theme","baseTheme","defaultMode","desisgnSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","enableColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","systemSpacing","spacing","systemBreakpoints","breakpoints","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","attribute","clonedBaseTheme","useMemo","JSON","parse","stringify","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","hasMounted","useRef","_deepmerge","components","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","resolvedColorScheme","css","rootCss","vars","rootVars","basePrefix","getThemeVar","styleSheet","entries","forEach","key","scheme","resolvedDefaultColorScheme","useEffect","document","documentElement","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","window","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","oneOfType","object"],"sources":["C:/Users/Jona_/Documents/GitHub/3sat_instance_generator/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\r\nconst _excluded = [\"colorSchemes\"],\r\n      _excluded2 = [\"colorSchemes\"],\r\n      _excluded3 = [\"components\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GlobalStyles } from '@mui/styled-engine';\r\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\r\nimport createSpacing from '../createTheme/createSpacing';\r\nimport createBreakpoints from '../createTheme/createBreakpoints';\r\nimport cssVarsParser from './cssVarsParser';\r\nimport ThemeProvider from '../ThemeProvider';\r\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\r\nimport useCurrentColorScheme from './useCurrentColorScheme';\r\nimport createGetThemeVar from './createGetThemeVar';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\r\nexport default function createCssVarsProvider(options) {\r\n  var _baseTheme$breakpoint;\r\n\r\n  const {\r\n    theme: baseTheme = {},\r\n    defaultMode: desisgnSystemMode = 'light',\r\n    defaultColorScheme: designSystemColorScheme,\r\n    disableTransitionOnChange = false,\r\n    enableColorScheme = true,\r\n    prefix: designSystemPrefix = '',\r\n    shouldSkipGeneratingVar\r\n  } = options;\r\n  const systemSpacing = createSpacing(baseTheme.spacing);\r\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\r\n\r\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\r\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\r\n  }\r\n\r\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\r\n\r\n  const useColorScheme = () => {\r\n    const value = React.useContext(ColorSchemeContext);\r\n\r\n    if (!value) {\r\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  function CssVarsProvider({\r\n    children,\r\n    theme: themeProp = {},\r\n    prefix = designSystemPrefix,\r\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\r\n    attribute = DEFAULT_ATTRIBUTE,\r\n    defaultMode = desisgnSystemMode,\r\n    defaultColorScheme = designSystemColorScheme\r\n  }) {\r\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\r\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\r\n    const clonedBaseTheme = React.useMemo(() => JSON.parse(JSON.stringify(baseTheme)), []);\r\n\r\n    const {\r\n      colorSchemes: baseColorSchemes = {}\r\n    } = clonedBaseTheme,\r\n          restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\r\n\r\n    const {\r\n      colorSchemes: colorSchemesProp = {}\r\n    } = themeProp,\r\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\r\n\r\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\r\n\r\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\r\n        {\r\n      components = {}\r\n    } = _deepmerge,\r\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\r\n\r\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\r\n    const allColorSchemes = Object.keys(colorSchemes);\r\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\r\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\r\n    const {\r\n      mode,\r\n      setMode,\r\n      systemMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme,\r\n      setColorScheme\r\n    } = useCurrentColorScheme({\r\n      supportedColorSchemes: allColorSchemes,\r\n      defaultLightColorScheme,\r\n      defaultDarkColorScheme,\r\n      modeStorageKey,\r\n      defaultMode\r\n    });\r\n\r\n    const resolvedColorScheme = (() => {\r\n      if (!colorScheme) {\r\n        // This scope occurs on the server\r\n        if (defaultMode === 'dark') {\r\n          return defaultDarkColorScheme;\r\n        } // use light color scheme, if default mode is 'light' | 'auto'\r\n\r\n\r\n        return defaultLightColorScheme;\r\n      }\r\n\r\n      return colorScheme;\r\n    })();\r\n\r\n    const {\r\n      css: rootCss,\r\n      vars: rootVars\r\n    } = cssVarsParser(mergedTheme, {\r\n      prefix,\r\n      basePrefix: designSystemPrefix,\r\n      shouldSkipGeneratingVar\r\n    });\r\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\r\n      components,\r\n      colorSchemes,\r\n      vars: rootVars,\r\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\r\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\r\n      getThemeVar: createGetThemeVar(prefix)\r\n    });\r\n    const styleSheet = {};\r\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\r\n      const {\r\n        css,\r\n        vars\r\n      } = cssVarsParser(scheme, {\r\n        prefix,\r\n        basePrefix: designSystemPrefix,\r\n        shouldSkipGeneratingVar\r\n      });\r\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\r\n\r\n      const resolvedDefaultColorScheme = (() => {\r\n        if (typeof defaultColorScheme === 'string') {\r\n          return defaultColorScheme;\r\n        }\r\n\r\n        if (defaultMode === 'dark') {\r\n          return defaultColorScheme.dark;\r\n        }\r\n\r\n        return defaultColorScheme.light;\r\n      })();\r\n\r\n      if (key === resolvedDefaultColorScheme) {\r\n        styleSheet[':root'] = css;\r\n      } else {\r\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\r\n      }\r\n    });\r\n    React.useEffect(() => {\r\n      if (colorScheme) {\r\n        // attaches attribute to <html> because the css variables are attached to :root (html)\r\n        document.documentElement.setAttribute(attribute, colorScheme);\r\n      }\r\n    }, [colorScheme, attribute]);\r\n    useEnhancedEffect(() => {\r\n      if (!mode || !enableColorScheme) {\r\n        return undefined;\r\n      }\r\n\r\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\r\n\r\n      if (mode === 'system') {\r\n        document.documentElement.style.setProperty('color-scheme', systemMode);\r\n      } else {\r\n        document.documentElement.style.setProperty('color-scheme', mode);\r\n      }\r\n\r\n      return () => {\r\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\r\n      };\r\n    }, [mode, systemMode]);\r\n    React.useEffect(() => {\r\n      let timer;\r\n\r\n      if (disableTransitionOnChange && hasMounted.current) {\r\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\r\n        const css = document.createElement('style');\r\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\r\n        document.head.appendChild(css); // Force browser repaint\r\n\r\n        (() => window.getComputedStyle(document.body))();\r\n\r\n        timer = setTimeout(() => {\r\n          document.head.removeChild(css);\r\n        }, 1);\r\n      }\r\n\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }, [colorScheme]);\r\n    React.useEffect(() => {\r\n      hasMounted.current = true;\r\n      return () => {\r\n        hasMounted.current = false;\r\n      };\r\n    }, []);\r\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\r\n      value: {\r\n        mode,\r\n        setMode,\r\n        lightColorScheme,\r\n        darkColorScheme,\r\n        colorScheme,\r\n        setColorScheme,\r\n        allColorSchemes\r\n      },\r\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\r\n        styles: {\r\n          ':root': rootCss\r\n        }\r\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\r\n        styles: styleSheet\r\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\r\n        theme: mergedTheme,\r\n        children: children\r\n      })]\r\n    });\r\n  }\r\n\r\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\r\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\r\n    attribute: PropTypes.string,\r\n\r\n    /**\r\n     * The component tree.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * The initial color scheme used.\r\n     */\r\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n\r\n    /**\r\n     * The initial mode used.\r\n     */\r\n    defaultMode: PropTypes.string,\r\n\r\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\r\n    modeStorageKey: PropTypes.string,\r\n\r\n    /**\r\n     * CSS variable prefix.\r\n     */\r\n    prefix: PropTypes.string,\r\n\r\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\r\n    theme: PropTypes.object\r\n  } : void 0;\r\n  return {\r\n    CssVarsProvider,\r\n    useColorScheme,\r\n    getInitColorSchemeScript\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}